---
- hosts: localhost
  connection: local
  become: yes
  tasks:
  - name: Install docker
    ansible.builtin.apt:
      name: docker.io

  - name: Enable and start docker
    ansible.builtin.systemd_service:
      state: started
      enabled: true
      name: docker

  - name: Check if Kubernetes GPG key exists
    stat:
      path: "/etc/apt/keyrings/kubernetes.gpg"
    register: gpg_result

  - name: Curl and download Kubernetes GPG key
    ansible.builtin.shell: curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes.gpg
    when: not gpg_result.stat.exists

  - name: Add Kubernetes repository to list
    ansible.builtin.lineinfile:
      path: /etc/apt/sources.list
      line: "deb [arch=amd64 signed-by=/etc/apt/keyrings/kubernetes.gpg] http://apt.kubernetes.io/ kubernetes-xenial main"

  - name: Run 'apt update'
    ansible.builtin.apt:
      update_cache: yes
      cache_valid_time: 3600
    ignore_errors: true

  - name: Install Kubernetes
    ansible.builtin.apt:
      pkg:
      - kubeadm
      - kubelet
      - kubectl

  - name: Apt-mark hold the Kubernetes packages
    ansible.builtin.shell: sudo apt-mark hold kubeadm kubelet kubectl

  - name: Disable swap spaces
    ansible.builtin.shell: sudo swapoff -a

  - name: Add required containerd modules to config file
    ansible.builtin.copy:
      dest: /etc/modules-load.d/containerd.conf
      content: |
        overlay
        br_netfilter

  - name: Add required kernel modules
    community.general.modprobe:
      name: "{{ modules }}"
#      persistent: present
    vars:
      modules:
        - overlay
        - br_netfilter

  - name: Generate, and populate, kubernetes.conf file
    ansible.builtin.copy:
      dest: /etc/sysctl.d/kubernetes.conf
      content: |
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1

  - name: Reload configuration
    ansible.builtin.shell: sudo sysctl --system

  